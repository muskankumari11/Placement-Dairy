//leetcode

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if (intervals.empty()) return {};

        // Step 1: Sort intervals by the start value
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> merged;
        
        // Step 2: Iterate through the sorted intervals
        for (auto interval : intervals) {
            if (merged.empty() || merged.back()[1] < interval[0]) {
                // No overlap, add new interval
                merged.push_back(interval);
            } else {
                // Overlapping, merge with the last interval
                merged.back()[1] = max(merged.back()[1], interval[1]);
            }
        }
        
        return merged;
    }
};

//full code

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if (intervals.empty()) return {};  

        sort(intervals.begin(), intervals.end());  

        vector<vector<int>> ans;  // Replaced merged with ans
        
        for (int i = 0; i < intervals.size(); i++) { 
            if (ans.empty() || ans.back()[1] < intervals[i][0]) {
                ans.push_back(intervals[i]);
            } else {
                ans.back()[1] = max(ans.back()[1], intervals[i][1]);
            }
        }
        
        return ans;
    }
};

int main() {
    Solution sol;
    vector<vector<int>> intervals = {{1,3}, {2,6}, {8,10}, {15,18}};
    
    vector<vector<int>> result = sol.merge(intervals);

    for (int i = 0; i < result.size(); i++) {  
        cout << "[" << result[i][0] << "," << result[i][1] << "] ";
    }
    
    return 0;
}
