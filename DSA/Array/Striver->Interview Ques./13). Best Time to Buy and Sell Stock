//full code 
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) {
            return 0;
        }
        int minPrice = prices[0];  
        int maxi = 0;
        for (int i = 1; i < n; i++) {
            if (prices[i] < minPrice) {
                minPrice = prices[i];
            }
            int profit = prices[i] - minPrice;
            maxi = max(maxi, profit);
        }
        return maxi;
    }
};

int main() {
    vector<int> prices = {1, 2, 5, 3, 2, 6};
    Solution obj;
    int result = obj.maxProfit(prices);  
    cout << "Max Profit: " << result << endl;  
    return 0;
}


//leetcode

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) {
            return 0;
        }

        int minPrice = prices[0];  // Renamed 'min' to 'minPrice'
        int maxi = 0;

        for (int i = 1; i < n; i++) {
            if (prices[i] < minPrice) {
                minPrice = prices[i];
            }
            int profit = prices[i] - minPrice;
            maxi = max(maxi, profit);
        }

        return maxi;
    }
};
