// full code->optimal soln 

#include<bits/stdc++.h>

using namespace std;
void solve(int arr[], int n) {
  int temp = arr[0]; // storing the first element of array in a variable
  for (int i = 0; i < n - 1; i++) {
    arr[i] = arr[i + 1];
  }
  arr[n - 1] = temp; // assigned the value of variable at the last index
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }

}
int main() {
  int n=5;
  
  int arr[]= {1,2,3,4,5};
  solve(arr, n);
}

//code->optimal soln on app- coding ninja- naukri.com
#include <bits/stdc++.h>
using namespace std;

vector<int> rotateArray(vector<int>& arr, int n) {
    int temp = arr[0];
    
    // Shift elements to the left by 1
    for (int i = 0; i < n - 1; i++) {
        arr[i] = arr[i + 1];
    }
    
    // Place the first element at the end
    arr[n - 1] = temp;
    
    return arr;  // Return the rotated array
}

//Time Complexity: O(n), as we iterate through the array only once.

//Space Complexity: O(1) as no extra space is used
