class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int low=0;
        int high=n-1;
        int mid=0;
        while(mid<=high){
            if(nums[mid]==0){
            swap(nums[low],nums[mid]);
            low++;
            mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else{
                swap(nums[mid],nums[high]);
                high--;
            }
        } 
    }
};


 //full code

 #include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high = nums.size() - 1;

        while (mid <= high) {
            if (nums[mid] == 0) {  // Move 0s to the beginning
                swap(nums[low], nums[mid]);
                low++;
                mid++;
            } 
            else if (nums[mid] == 1) {  // Keep 1s in the middle
                mid++;
            } 
            else {  // Move 2s to the end
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};

// Driver Code to Test
int main() {
    vector<int> nums = {2, 0, 2, 1, 1, 0};
    
    Solution sol;
    sol.sortColors(nums);

    // Print sorted array
    cout << "Sorted Colors: ";
    for (int num : nums) {
        cout << num << " ";
    }

    return 0;
}

//tc->o(n)
//sc-> o(1)
