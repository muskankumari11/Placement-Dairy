class Solution {
public:
    int minSteps(string s, string t) {
        int mp_s[26]={0};
        int mp_t[26]={0};
        int n=s.length();
        for(int i=0;i<n;i++){
            mp_s[s[i]-'a']++;
            mp_t[t[i]-'a']++;
        }
        int res=0;
        for(int i=0;i<26;i++){
            if(mp_s[i]>mp_t[i])
            res+=mp_s[i]-mp_t[i];
        }
        return res;
    }
};

//tc-> O(n)-> best because arrays are faster than maps.


//2nd method ->using map

class Solution {
public:
    int minSteps(string s, string t) {
        unordered_map<char, int>mp_s;
        unordered_map<char, int>mp_t;
        for(auto &ch:s){
            mp_s[ch]++;
        }
        for(auto &ch:t){
            mp_t[ch]++;
        }
        int res=0;
        for(char ch='a'; ch<='z';++ch){
            if(mp_s[ch]>mp_t[ch])
            res+=mp_s[ch]-mp_t[ch];
        }
        return res;
    }
};

//time complexity->O(m+n)
